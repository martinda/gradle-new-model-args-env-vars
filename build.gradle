@Managed interface JuiceComponent extends GeneralComponentSpec { }

@Managed
interface JuiceBinarySpec extends BinarySpec {
    List<String> getArgs()
    void setArgs(List<String> Args)
}

class JuicerRules extends RuleSource {
    @ComponentType void registerComponent(TypeBuilder<JuiceComponent> builder) {
        println("Register component: "+builder)
    }
    @ComponentType void registerJuiceBinarySpec(TypeBuilder<JuiceBinarySpec> builder) {
        println("Register binary spec: "+builder)
    }

    @BinaryTasks
    void generateTasks(ModelMap<Task> tasks, final JuiceBinarySpec binary) {
        println("Generate tasks for binary: "+binary)
        tasks.create("Juicer", DefaultTask) { task ->
            // Next line throws exception, unless the value is set in the model
            println(binary.getArgs())
        }
    }
/*
    @Defaults
    void defaultsArgs(@Each JuiceBinarySpec binary) {
        println("Defaults: "+binary)
        binary.args = []
    }
*/
/*
    @Mutate
    void mutateArgs(@Each JuiceBinarySpec binary) {
        println("Mutate: "+binary)
        binary.args += ['a']
    }
*/
}

apply plugin: JuicerRules

model {
    components {
        juiceComponent(JuiceComponent) {
            binaries {
                orange(JuiceBinarySpec) {
                    println("dsl create")
                    // Uncomment out the next line to make the exception go away
                    //args += ['b']
                }
            }
        }
    }
}
/*
model {
    components {
        juiceComponent {
            binaries {
                orange {
                    println("dsl mutate")
                    args += ['c']
                }
            }
        }
    }
}
*/
